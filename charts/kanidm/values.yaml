# Default values for kanidm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: kanidm/server
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

livenessProbe:
  httpGet:
    path: /status
    port: web
    scheme: HTTPS
readinessProbe:
  httpGet:
    path: /status
    port: web
    scheme: HTTPS

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

certs:
  # CA certificate issueing parameters
  # Most likely you only need this when generating the certs without cert-manager.
  # Allthough you can use cert-manager to create this certificate, it would be 
  # much easier to create an cert-manager.io/{Issuer,ClusterIssuer} to issue the
  # SSL certificate, than issuing a new CA certificate and signing the SSL with
  # that without cert-manager.
  #
  # TLDR: Do not use this together with cert-manager, unless you know what you are
  # doing!
  #
  # Is disabled by default
  ca:
    # # secretName: 

    key: {}
      # fromFile: ""
      # fromLiteral: ""
    
    cert: {}
      # fromFile: ""
      # fromLiteral: ""

    # duration: 8640h # 360 days
    # renewBefore: 4320h # 180 days giving enough time to rotate other certificates before the ca expires

    # privateKey:
    #   algorithm: RSA
    #   encoding: PKCS1
    #   size: 2048

    # issuerRef: {}
    #   # name: selfsigned
    #   # kind: ClusterIssuer
    #   # group: cert-manager.io
    # installIssuer:
    #   enabled: false
    #   name: ca
    #   kind: ClusterIssuer
  ssl:
    # secretName: 

    key: {}
      # fromFile: ""
      # fromLiteral: ""
    
    cert: {}
      # fromFile: ""
      # fromLiteral: ""

    duration: 2160h # 90 days
    renewBefore: 720h # 30 days

    privateKey:
      algorithm: RSA
      encoding: PKCS1
      size: 2048

    issuerRef:
      name: ca
      kind: ClusterIssuer
      group: cert-manager.io
  

kanidm:
  web:
    service:
      type: ClusterIP
      port: 443
      annotations: {}
        # traefik.ingress.kubernetes.io/service.serversscheme: https
        # traefik.ingress.kubernetes.io/service.serverstransport: foobar@kubernetescrd

    # HTTPS requests can be reverse proxied by a loadbalancer.
    # To preserve the original IP of the caller, these systems
    # will often add a header such as "Forwarded" or
    # "X-Forwarded-For". If set to true, then this header is
    # respected as the "authoritative" source of the IP of the
    # connected client. If you are not using a load balancer
    # then you should leave this value as default.
    #
    # Defaults to false
    trustXForwardFor: false
  
  # The read-only ldap server bind address. Requires
  # TLS certificates.
  ldap:
    enabled: false
    service:
      type: ClusterIP
      port: 636

  # The log level of the server. May be one of info, debug, trace
  #
  # NOTE: this can be overridden by the environment variable
  # `KANIDM_LOG_LEVEL` at runtime
  #
  # Defaults to "info"
  logLevel: "debug"

  # The DNS domain name of the server. This is used in a
  # number of security-critical contexts
  # such as webauthn, so it *must* match your DNS
  # hostname. It is used to create
  # security principal names such as `william@idm.example.com`
  # so that in a (future) trust configuration it is possible
  # to have unique Security Principal Names (spns) throughout
  # the topology.
  #
  # ⚠️  WARNING ⚠️
  #
  # Changing this value WILL break many types of registered
  # credentials for accounts including but not limited to
  # webauthn, oauth tokens, and more.
  # If you change this value you *must* run
  # `kanidmd domain_name_change` immediately after.
  #
  # Be sure to expose the service on this domain for example by
  # enabling the ingress like this:
  # ````yaml
  # ingress:
  #   enabled: false
  #   className: ""
  #   annotations: {}
  #     # kubernetes.io/ingress.class: nginx
  #     # kubernetes.io/tls-acme: "true"
  #   hosts:
  #     - host: idm.example.com
  #       paths:
  #         - path: /
  #           pathType: ImplementationSpecific
  #   tls: []
  #   #  - secretName: kanidm-ingress-tls
  #   #    hosts:
  #   #      - idm.example.com
  # ````
  domain: "idm.example.com"

  # The origin for webauthn. This is the url to the server,
  # with the port included if it is non-standard (any port
  # except 443). This must match or be a descendent of the
  # domain name you configure above. If these two items are
  # not consistent, the server WILL refuse to start!
  # origin: "https://idm.example.com"
  #
  # Defaults to the `domain`
  origin: ""

  backup:
    enabled: false
    path: "/var/kanidm/backup"
    schedule: "00 22 * * *"
    versions: 7
